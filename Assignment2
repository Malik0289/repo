{
  "metadata": {
    "language_info": {
      "name": ""
    },
    "kernelspec": {
      "name": "",
      "display_name": ""
    }
  },
  "nbformat_minor": 4,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "source": "# Challenging Aspect of Data Structure",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "## 1. Stack",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "> Stack is a linear collection of items that supports LIFO (last-in, first-out) semantics for insertion and deletion.\n> For instance: stack of plates at restaurant are added or removed from the top (last) , not from the bottom (first).",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "## 1.1 Two types of operations in stack:\n 1. Push: to add data into\n 2. Pop: to remove data from",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "## 1.1.1 Push\n> Push: adds element at the top of the stack.",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "## 1.1.2 Pop\n> Pop: removes element from the top of the stack",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "## 1.2 Implementing Stack\n> In Python, Stacks can be implement by:\n> 1. list: using built-in list data structure.\n> 2. collections.deque: using deque library.\n> 3. queue.LifoQueue: using queue.LifoQueue class.",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "## 1.3 Creating Stack with List\n> Use append() function to push.\n> Use pop() function to pop in LIFO order.",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "#Create empty stack (list) & add 3 elements into the list\nstack = []\nstack.append('Below')\nstack.append('Middle')\nstack.append('Top')\nprint('After append: ', stack)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 14,
      "outputs": [
        {
          "name": "stdout",
          "text": "After append:  ['Below', 'Middle', 'Top']\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "# pop or remove element from stack\nprint('Popping out once: ', stack.pop())",
      "metadata": {
        "trusted": true
      },
      "execution_count": 15,
      "outputs": [
        {
          "name": "stdout",
          "text": "Popping out once:  Top\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "# pop or remove element from stack\nprint('Popping out again: ', stack.pop())",
      "metadata": {
        "trusted": true
      },
      "execution_count": 16,
      "outputs": [
        {
          "name": "stdout",
          "text": "Popping out again:  Middle\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "# checking the left over \nprint('Check for the last element in the stack: ', stack)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 17,
      "outputs": [
        {
          "name": "stdout",
          "text": "Check for the last element in the stack:  ['Below']\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "---\nAhmad Malik: 09/04/2022\n---",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    }
  ]
}